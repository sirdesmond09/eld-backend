# Generated by Django 5.1.6 on 2025-07-11 09:58

import core.models.accounts.user
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Role',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('type', models.CharField(blank=True, choices=[('admin', 'Admin'), ('landlord', 'Landlord'), ('tenant', 'Tenant'), ('property_manager', 'Property Manager')], max_length=255, null=True)),
            ],
            options={
                'ordering': ['-created_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(error_messages={'unique': 'The provided email is not available'}, max_length=254, unique=True, verbose_name="User's email")),
                ('is_email_verified', models.BooleanField(default=False, verbose_name='Is user email verified')),
                ('email_verification_token', models.CharField(blank=True, max_length=7, null=True, verbose_name='Email verification token')),
                ('email_verification_token_expires_at', models.DateTimeField(blank=True, null=True, verbose_name='Email verification token expires at')),
                ('email_last_updated_at', models.DateTimeField(blank=True, null=True)),
                ('forgot_password_token', models.CharField(max_length=6, null=True, unique=True)),
                ('forgot_password_token_expires_at', models.DateTimeField(blank=True, null=True)),
                ('first_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='First name')),
                ('last_name', models.CharField(blank=True, max_length=255, null=True, verbose_name='Last name')),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female')], max_length=255, null=True, verbose_name='Gender')),
                ('address', models.TextField(blank=True, null=True, verbose_name='Address')),
                ('country', models.CharField(blank=True, max_length=255, null=True, verbose_name='Country')),
                ('state', models.CharField(blank=True, max_length=255, null=True, verbose_name='State')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='profiles/avatars')),
                ('phone_number', models.CharField(blank=True, max_length=25, null=True, unique=True, verbose_name="User's Phone number")),
                ('is_phone_verified', models.BooleanField(default=False, verbose_name='Is user phone verified')),
                ('phone_verification_token', models.CharField(blank=True, max_length=7, null=True, verbose_name='Phone verification token')),
                ('phone_verification_token_expires_at', models.DateTimeField(blank=True, null=True, verbose_name='Phone verification token expires at')),
                ('is_two_factor_enabled', models.BooleanField(default=False, verbose_name='Is 2FA enabled')),
                ('two_factor_auth_secret', models.CharField(blank=True, max_length=255, null=True, verbose_name='2FA secret')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of birth')),
                ('marital_status', models.CharField(blank=True, choices=[('single', 'Single'), ('married', 'Married'), ('divorced', 'Divorced'), ('widowed', 'Widowed')], max_length=255, null=True, verbose_name='Marital status')),
                ('login_attempts_remaining', models.IntegerField(default=5, verbose_name='Login attempts Left')),
                ('account_locked_until', models.DateTimeField(blank=True, null=True, verbose_name='Account locked until')),
                ('reactivation_task_id', models.CharField(blank=True, max_length=255, null=True, verbose_name='Reactivation task ID')),
                ('must_change_password', models.BooleanField(default=False, help_text='If True, user must change password after first login', verbose_name='User must change password on next login')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('role', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='users', to='core.role')),
            ],
            options={
                'ordering': ['created_at'],
                'indexes': [models.Index(fields=['email', 'avatar'], name='core_user_email_2bac3f_idx'), models.Index(fields=['email'], name='core_user_email_38052c_idx'), models.Index(fields=['email_verification_token'], name='core_user_email_v_53b322_idx'), models.Index(fields=['forgot_password_token'], name='core_user_forgot__dbc579_idx')],
            },
            managers=[
                ('objects', core.models.accounts.user.UserManager()),
            ],
        ),
    ]
